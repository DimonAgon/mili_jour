str_lessons = corresponding_report.lessons
str_lessons_splitted = str_lessons.split()
lessons = [int(e) for e in str_lessons_splitted]
last_lesson = lessons[-1]
last_lesson_time_interval = Schedule.lessons_intervals[last_lesson]
last_lesson_time_interval_upper = last_lesson_time_interval.upper
last_lesson_datetime = datetime.datetime.combine(date, last_lesson_time_interval_upper)
now = datetime.datetime.now()
last_lesson_ended = last_lesson_datetime < now


@dp.message_handler(commands='stop_poll')
async def stop_poll(message:types.Message): #Makes a poll inactive
    dp.bot.stop_poll()
    pass

from aiogram.filters import Filter
from aiogram import types

class QuizOptionFilter(Filter):
    key = 'poll_answer'

    def __init__(self, id_):
        self.target_option_id = id_

class ProfileForm(forms.ModelForm):

    fields = {
        'name': None,
        'journal': None,
        'ordinal': None
    }

    labels = {
        'name': "Ваше Прізвище та Ім'я",
        'ordinal': "Ваш номер у списку",
        'journal': "Номер вашого взводу"
    }

    patterns = {
        'name': "\p{L}*\s\p{Lu}{1}\p{L}+(?:[- ])?\p{Lu}{1}\p{L}+",
        'journal': "(?!0)\d{3}",
        'ordinal': "(?!0)\d{1,2}"
    }

    validation = {
        'name': "Введіть ім'я коректно",
        'journal': "Введіть номер взводу коректно",
        'ordinal': "Введіть номер коректно"
    }



@dispatcher.register('journalform')
class JournalForm(Form):
    name = fields.TextField("Номер взводу", validators=[validate_journal_format])

    @classmethod
    async def callback(cls, message: types.Message, forms: FormsManager, **data) -> None:

        data = await forms.get_data(JournalForm)
        group_id = message.chat.id

        try:

            await add_journal(data, group_id)
            await message.answer(text="Взвод було додано у бд, журнал відвідувань створено!")

        except Exception as e:

            await message.answer(text="При реєстраціі взводу виникла помилка, спробуєте ще раз піздніше")



class Form(StatesGroup):
    test1 = State()



@router.message(Command(commands="test_register"))
async def initiate_test_register(message: types.Message, state: FSMContext):
    await message.reply(text="initiating registration")
    await state.set_state(Form.test1)


@router.message(Form.test1)
async def process_test1(message: types.Message, state: FSMContext):
    await message.reply(text="processing test1")
    await state.clear()



@router.poll_answer()  # TODO: add a flag for vote-answer mode
def handle_who_s_present(poll_answer: types.poll_answer):
    now = datetime.datetime.now()  # TODO: use time for schedule control, use date for entry's date

    user_id = poll_answer.user.id
    profile = Profile.objects.get(external_id=user_id)
    selected_option = poll_answer.option_ids[0]
    journal = Journal.objects.get(name=profile.journal)



class CleanJournalNameFilter(Filter):
    pass


from aiogram.filters.base import Filter
from aiogram import types
from aiogram.fsm.context import FSMContext

class CurrentUserFilter(Filter):
    key = 'from_user'

    def __init__(self):

        self.state = FSMContext
        self.current_user_id = self.state.get_data('current_user_id')

    async def __call__(self, message: types.Message) -> bool:
        return message.from_user.id == self.current_user_id


# @router.message(JournalForm.name)#,CurrentUserFilter)
# async def handle_registered_journal_name(message: types.Message, state: FSMContext):
#     name = message.text
#
#     if not Journal.objects.get(name=name):
#         await state.update_data(name=name)
#         await state.set_state('strength')
#         await message.reply(JournalForm.strength_label)
#     else:
#         await message.reply(text="Помилка: За заданим взводом вже cтворено журнал", disable_notification=True)



# @router.message(JournalForm.strength)# ,CurrentUserFilter)
# async def handle_registered_journal_strength(message: types.Message, state: FSMContext):
#     strength = message.text
#
#     await state.update_data(strength=strength)
#     await state.set_state('initial')



# @router.message(Command(commands='register'),JournalForm.initial)  # ,CurrentUserFilter)
# async def register_journal(message: types.message, state: FSMContext):
#
#         group_id = await state.get_state('group_id')
#         name = await state.get_data('name')
#         strength = await state.get_data('strength')
#
#         await message.reply(add_journal(state_name, group_id))
#         await state.clear()
#
#     else:
#         await message.reply(text="Помилка: За заданим взводом вже cтворено журнал", disable_notification=True)



# map(lambda p: add_journal_entry({'journal': journal, 'profile': p,  'date': today, 'is_present': False}), ordered_profiles)